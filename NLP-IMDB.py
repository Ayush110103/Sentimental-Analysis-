# -*- coding: utf-8 -*-
"""Untitled39.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19akFBEcoXX3NgBcMheq98KW2YeufXMp9
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
nltk.download('punkt')
from nltk.tokenize import word_tokenize
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers import Embedding, LSTM, Dense, Dropout
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings('ignore')
sns.set()

try:
    imdb = pd.read_csv("/content/IMDB Dataset.csv", error_bad_lines=False)
except Exception as e:
    print("Error reading CSV file:", e)

imdb.sentiment.value_counts()

# Assuming 'imdb' is your DataFrame containing the IMDb dataset
text = imdb['review'][0]  # Assuming 'review' is the column containing the reviews
print(text)
print("<=>")
print(word_tokenize(text))

corpus = []
for text in imdb['review']:  # Assuming 'review' is the column containing the reviews
    words = [word.lower() for word in word_tokenize(text)]
    corpus.append(words)

num_words = sum(len(words) for words in corpus)
print(num_words)

imdb.shape

train_size = int(imdb.shape[0] * 0.8)
X_train = imdb.review[:train_size]  # Assuming 'review' is the column containing the reviews
y_train = imdb.sentiment[:train_size]  # Assuming 'sentiment' is the column containing the sentiments
X_test = imdb.review[train_size:]
y_test = imdb.sentiment[train_size:]

tokenizer = Tokenizer(num_words=num_words)  # Assuming 'num_words' is defined
tokenizer.fit_on_texts(X_train)
X_train = tokenizer.texts_to_sequences(X_train)
X_train = pad_sequences(X_train, maxlen=128, truncating='post', padding='post')

X_train[0],len(X_train[0])

print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)

le = LabelEncoder()
y_train = le.fit_transform(y_train)
y_test = le.transform(y_test)

model = Sequential()
model.add(Embedding(input_dim=num_words, output_dim=100, input_length=128, trainable=True))
model.add(LSTM(100, dropout=0.1, return_sequences=True))
model.add(LSTM(100, dropout=0.1))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.summary()

history = model. fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_test, y_test))

plt.figure(figsize=(16,5))
epochs = range(1, len(history.history['accuracy']) + 1)
plt.plot(epochs, history.history['loss'], 'b', label='Training Loss', color='red')
plt.plot(epochs, history.history['val_loss'], 'b', label='Validation Loss')
plt.legend()
plt.show()

plt.figure(figsize=(16,5))
epochs = range(1, len(history.history['accuracy']) + 1)
plt.plot(epochs, history.history['accuracy'], 'b', label='Training Accuracy', color='red')
plt.plot(epochs, history.history['val_accuracy'], 'b', label='Validation Accuracy')
plt.legend()
plt.show()

validation_sentence = ['This movie was not good at all. It had some good parts like the acting was pretty good but the story was not impressing at all.']
validation_sentence_tokenized = tokenizer.texts_to_sequences(validation_sentence)
validation_sentence_padded = pad_sequences(validation_sentence_tokenized, maxlen=128, truncating='post', padding='post')
print(validation_sentence[0])
print("Probability of Positive: {:.2f}".format(model.predict(validation_sentence_padded)[0][0]))

validation_sentence = ['It had some bad parts like the storyline although the actors performed really well and that is why overall I enjoyed it.']
validation_sentence_tokenized = tokenizer.texts_to_sequences(validation_sentence)
validation_sentence_padded = pad_sequences(validation_sentence_tokenized, maxlen=128, truncating='post', padding='post')
print(validation_sentence[0])
print("Probability of Positive: {:.2f}".format(model.predict(validation_sentence_padded)[0][0]))

validation_sentence = ['I can watch this movie forever just because of the beauty in its cinematography.']
validation_sentence_tokenized = tokenizer.texts_to_sequences(validation_sentence)
validation_sentence_padded = pad_sequences(validation_sentence_tokenized, maxlen=128, truncating='post', padding='post')
print(validation_sentence[0])
print("Probability of Positive: {:.2f}".format(model.predict(validation_sentence_padded)[0][0]))